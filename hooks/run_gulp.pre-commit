#!/bin/bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
#exec git diff-index --check --cached $against --

projectRoot='/var/www/html/web/themes/custom/pb'
jsErrors="/tmp/pre-commit.js"
scssErrors="/tmp/pre-commit.scss"
twigErrors="/tmp/pre-commit.twig"

cd $projectRoot
errorFlag=0



echo -n "Running linters"

while read line ; do

	test=`echo $line | egrep 'warning'`
	if [ $? -eq 0 ] ; then
		warnings=$(( $warnings + 1 ))
		errorFlag=1
	fi

	test=`echo $line | egrep 'problems'`
	if [ $? -eq 0 ] ; then
		problems=$(( $problems + 1 ))
		errorFlag=1
	fi

	test=`echo $line | egrep 'error'`
	if [ $? -eq 0 ] ; then
		errors=$(( $errors + 1))
	fi

	test=`echo $line | egrep '^/.+\.js'`
	if [ $? -eq 0 ] ; then
		jsFiles=$(( $jsFiles + 1 ))
		echo $line >> $jsErrors
		errorFlag=1
	fi

	test=`echo $line | egrep '^sass/.+\.scss'`
	if [ $? -eq 0 ] ; then
		cssFiles=$(( $cssFiles + 1 ))
		echo $line >> $scssErrors
		errorFlag=1
	fi

	test=`echo $line | egrep '.twig:$'`
	if [ $? -eq 0 ] ; then
		twigExceptions=$(( $twigExceptions + 1 ))
		echo $line >> $twigErrors
		errorFlag=1
	fi

	echo -n '.'
done <<<$(/var/www/html/web/themes/custom/pb/node_modules/gulp/bin/gulp.js 2>&1)

# count unique scss files with errors
if [ -f $scssErrors ] ; then
	cssFiles=`cat $scssErrors | uniq | wc -l`
fi

# count unique js files with errors
if [ -f $jsErrors ] ; then
	jsFiles=`cat $jsErrors | uniq | wc -l`
fi


# count unique twig files with errors
if [ -f $twigErrors ] ; then
	twigFiles=`cat $twigErrors | uniq | wc -l`
fi


# clean up
if [ -f $scssErrors ] ; then
	rm $scssErrors
fi

if [ -f $jsErrors ] ; then
	rm $jsErrors
fi

if [ -f $twigErrors ] ; then
	rm $twigErrors
fi

errorFlag=1

if [ $errorFlag -gt 0 ] ; then

	echo -e  "\nwarnings: $warnings">&2
	echo "Problems: $problems">&2
	echo "Errors: $errors">&2
	echo "Found in $cssFiles scss files and $jsFiles js files.">&2
	echo "Found $twigExceptions twig exceptions in $twigFiles twig files."

	echo -e "\nAborting the commit.">&2
  echo -e 'Please fix errors or run `git commit` using `--no-verify` flag to ignore this message.\n'>&2
else
	echo -e "\nLinter check complete!\n"
fi

exit 2
